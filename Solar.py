import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('TkAgg')  # Or 'Agg', 'Qt5Agg', depending on your system
import matplotlib.pyplot as plt

# Solar Panel Parameters
P_max = 430  # Nominal power in Watts (STC)
I_NOCT = 1000  # Light intensity at STC in W/m^2
temperature_coefficient = -0.0029  # Temperature coefficient (per °C)
T_ref = 25  # Reference temperature in °C (STC)
amount_of_panels = 397  # Amount of solar panels
#397
panel_area = 1.13*1.19 #(check)

# Preprocess CSV
def preprocess_csv(file_path, output_path):
    with open(file_path, 'r', encoding='utf-8') as infile, open(output_path, 'w', encoding='utf-8') as outfile:
        for line in infile:
            # Replace commas with dots and empty fields with NaN
            line = line.replace(',', '.').replace('""', 'NaN')
            outfile.write(line)

# File paths
input_file = 'report_17_1_2025.csv'
processed_file = 'processed_report.csv'

# Preprocess the CSV file
preprocess_csv(input_file, processed_file)

# Load the processed CSV using pandas
df = pd.read_csv(processed_file, delimiter=';', parse_dates=['time'], dayfirst=True)

# Extract specific columns
time = df['time']  # Parsed as datetime
T_actual = pd.to_numeric(df['Buitentemperatuur'], errors='coerce')  # Outdoor temperature
export_limit = pd.to_numeric(df['Export beperking'], errors='coerce')  # Export limit as percentage
global_radiation = pd.to_numeric(df['Globale straling'], errors='coerce') # Global Radiation

# Handle missing data
T_actual.fillna(method='ffill', inplace=True)  # Fill temperature NaNs with the previous value
export_limit.fillna(100, inplace=True)  # Replace missing export limits with 100%
global_radiation.fillna(0, inplace=True) # Replace missing global radiation with 0

global_radiation = global_radiation * panel_area * amount_of_panels

# Calculate Power Output per panel
P_raw = P_max * (global_radiation / I_NOCT)  # Power generated by a single panel

# Adjust for temperature effects
P_raw = P_raw * (1 + temperature_coefficient * (T_actual - T_ref))  # Temperature adjustment
P_raw = np.clip(P_raw, 0, None)  # Set negative values to 0

# Adjust Power Output for Export Limit
export_factor = export_limit / 100.0  # Convert percentage to a multiplier
P_adjusted = P_raw * export_factor  # Apply export limit

# Convert power values from Watts to Kilowatts
P_raw_kW = P_raw / 1000
P_adjusted_kW = P_adjusted / 1000

# Calculate Energy Outputs
dt = 1 / 12  # Time interval in hours (5-minute intervals = 1/12 hour)
E_raw = np.sum(P_raw_kW) * dt  # Total energy output
E_lost = np.sum(P_adjusted_kW) * dt  # Total energy lost due to export limit

# Display Results and put them in graph
print(f"Totale theoretische opwekking: {E_raw:.2f} kWh")
print(f"Totale misgelopen energie: {E_lost:.2f} kWh")

# Plot Results
plt.figure(figsize=(12, 6))
plt.plot(time, P_adjusted_kW, '-o', label="Misgelopen Energie", markersize=4, color='green')
plt.plot(time, P_raw_kW, '-o', label="Totale Theoretische Output", markersize=4, color='red')
plt.xlabel('Tijd')
plt.ylabel('Vermogen (kW)')
plt.title('Exportbeperking kwantificeren')
plt.grid(True)
plt.legend()
# display end results in graph
plt.text(time.iloc[0], P_raw_kW.max(), f"Totale Theoretische Energie: {E_raw:.2f} kWh", fontsize=12, color='red')
plt.text(time.iloc[0], P_adjusted_kW.max(), f"Misgelopen Energie: {E_lost:.2f} kWh", fontsize=12, color='green')

# Improve datetime formatting on x-axis
plt.gcf().autofmt_xdate()
plt.tight_layout()
plt.show()
